import{_ as s,c as a,o as n,a as e}from"./app.9d007d2b.js";const d=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[{"level":2,"title":"示例代码(依旧穿插着本章代码)","slug":"示例代码-依旧穿插着本章代码","link":"#示例代码-依旧穿插着本章代码","children":[]},{"level":2,"title":"track(依赖收集)","slug":"track-依赖收集","link":"#track-依赖收集","children":[]},{"level":2,"title":"trigger(触发更新)","slug":"trigger-触发更新","link":"#trigger-触发更新","children":[]},{"level":2,"title":"为什么使用Reflect","slug":"为什么使用reflect","link":"#为什么使用reflect","children":[]}],"relativePath":"vue3/reactivity/track-trigger.md"}'),l={name:"vue3/reactivity/track-trigger.md"},p=e(`<p>本章我们来理清依赖收集跟派发更新的主体流程。</p><h2 id="示例代码-依旧穿插着本章代码" tabindex="-1">示例代码(依旧穿插着本章代码) <a class="header-anchor" href="#示例代码-依旧穿插着本章代码" aria-hidden="true">#</a></h2><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> reactive</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> effect </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Vue</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> proxy </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">reactive</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">rookie</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> result</span></span>
<span class="line"><span style="color:#82AAFF;">effect</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">result</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">proxy</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">name</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">proxy</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">name </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">rookie1</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>从上一章我们得知，当函数执行<code>effect</code>函数时，会有一个<code>ReactiveEffect</code>实例对象会赋值给全局的<code>activeEffect</code></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> _effect </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ReactiveEffect</span><span style="color:#A6ACCD;">(fn)</span></span>
<span class="line"><span style="color:#A6ACCD;">activeEffect </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> _effect </span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>接着执行<code>_effect.run</code>方法，执行传入的<code>fn</code>函数。</p><h2 id="track-依赖收集" tabindex="-1">track(依赖收集) <a class="header-anchor" href="#track-依赖收集" aria-hidden="true">#</a></h2><h2 id="trigger-触发更新" tabindex="-1">trigger(触发更新) <a class="header-anchor" href="#trigger-触发更新" aria-hidden="true">#</a></h2><h2 id="为什么使用reflect" tabindex="-1">为什么使用Reflect <a class="header-anchor" href="#为什么使用reflect" aria-hidden="true">#</a></h2><p>在<code>createGetter</code>函数中，有这么一段代码</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">Reflect</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">get</span><span style="color:#A6ACCD;">(target</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> key</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> receiver) </span><span style="color:#676E95;font-style:italic;">// 获取当前值</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>在<code>createSetter</code>函数中，也有这么一段代码</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 1. 获取旧值</span></span>
<span class="line"><span style="color:#A6ACCD;">oldValue </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> target[key]</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 2. 设置新值</span></span>
<span class="line"><span style="color:#A6ACCD;">Reflect</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">set</span><span style="color:#A6ACCD;">(target</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> key</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> value</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> receiver)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div>`,13),o=[p];function t(r,c,i,y,D,A){return n(),a("div",null,o)}const F=s(l,[["render",t]]);export{d as __pageData,F as default};
